// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
// Turns auto fix on save on or off.
//"eslint.autoFixOnSave": true,

// Show disable lint rule in the quick fix menu.
"eslint.codeAction.disableRuleComment": {
    "enable": true,
    "location": "separateLine",
    "commentStyle": "line"
},

// Show open lint rule documentation web page in the quick fix menu.
"eslint.codeAction.showDocumentation": {
    "enable": true
},

// Specifies the code action mode. Possible values are 'all' and 'problems'.
//  - all: Fixes all possible problems in the file. This option might take some time.
//  - problems: Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster.
"eslint.codeActionsOnSave.mode": "all",

// The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
"eslint.codeActionsOnSave.rules": null,

// Enables ESLint debug mode (same as `--debug` on the command line)
"eslint.debug": false,

// Controls whether eslint is enabled or not.
"eslint.enable": true,

// Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
"eslint.execArgv": null,

// Enables support of experimental Flat Config (aka eslint.config.js, supported by ESLint version 8.21 or later).
"eslint.experimental.useFlatConfig": false,

// Enables ESLint as a formatter.
"eslint.format.enable": false,

// If true, untitled files won't be validated by ESLint.
"eslint.ignoreUntitled": false,

// Controls whether a task for linting the whole workspace will be available.
"eslint.lintTask.enable": false,

// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
"eslint.lintTask.options": ".",

// Whether ESlint should migrate auto fix on save settings.
"eslint.migration.2_x": "on",

// The value of `NODE_ENV` to use when running eslint tasks.
"eslint.nodeEnv": null,

// A path added to `NODE_PATH` when resolving the eslint module.
"eslint.nodePath": null,

// A special rules customization section for text cells in notebook documents.
"eslint.notebooks.rules.customizations": [

],

// Whether ESLint should issue a warning on ignored files.
"eslint.onIgnoredFiles": "off",

// The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
"eslint.options": {

},

// The package manager you use to install node modules.
"eslint.packageManager": "npm",

// An array of language ids for which the extension should probe if support is installed.
"eslint.probe": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "vue",
    "markdown"
],

// Shortens the text spans of underlined problems to their first related line.
"eslint.problems.shortenToSingleLine": false,

// This option is deprecated. Use eslint.lintTask.enable instead.
// Controls whether a task for linting the whole workspace will be available.
"eslint.provideLintTask": false,

// Turns on quiet mode, which ignores warnings.
"eslint.quiet": false,

// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
"eslint.rules.customizations": [

],

// Run the linter on save (onSave) or on type (onType)
"eslint.run": "onType",

// The location of the node binary to run ESLint under.
"eslint.runtime": null,

// The time budget in milliseconds to spend on computing fixes before showing a warning or error.
"eslint.timeBudget.onFixes": {
    "warn": 3000,
    "error": 6000
},

// The time budget in milliseconds to spend on validation before showing a warning or error.
"eslint.timeBudget.onValidation": {
    "warn": 4000,
    "error": 8000
},

// Traces the communication between VSCode and the eslint linter service.
"eslint.trace.server": "off",

// Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
"eslint.useESLintClass": false,

// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
"eslint.validate": [

],

// Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
"eslint.workingDirectories": [

],